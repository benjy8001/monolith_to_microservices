version: '3.7'

services:
    emails-queue:
        container_name: microservice_emails
        build:
            context: ./microservices/emails
            dockerfile: Dockerfile
        volumes:
            - microservice_email_sources:/usr/src/app:rw
        links:
            - mail:mail
        env_file:
            - microservices/emails/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    users:
        container_name: microservice_users
        build:
            context: ./microservices/users
            dockerfile: Dockerfile
        volumes:
            - microservice_users_sources:/var/www:rw
            - ./microservices/users/docker/vhost.d:/etc/apache2/sites-enabled
        environment:
            - XDEBUG_CONFIG=remote_host=172.0.0.1 remote_enable=on
            - APP_XDEBUG=enabled
            - COMPOSER_AUTH=${COMPOSER_AUTH}
            - VIRTUAL_HOST=backend-users.micro.test
            - VIRTUAL_PORT=80
        depends_on:
            - users-db
        links:
            - users-db:db
        env_file:
            - microservices/users/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    checkout:
        container_name: microservice_checkout
        build:
            context: ./microservices/checkout
            dockerfile: Dockerfile
        volumes:
            - microservice_checkout_sources:/var/www:rw
            - ./microservices/checkout/docker/vhost.d:/etc/apache2/sites-enabled
        environment:
            - XDEBUG_CONFIG=remote_host=172.0.0.1 remote_enable=on
            - APP_XDEBUG=enabled
            - COMPOSER_AUTH=${COMPOSER_AUTH}
            - VIRTUAL_HOST=backend-checkout.micro.test
            - VIRTUAL_PORT=80
        depends_on:
            - checkout-db
        links:
            - checkout-db:db
            - users:users_api
        env_file:
            - microservices/checkout/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    checkout-queue:
        container_name: microservice_checkout_queue
        build:
            context: ./microservices/checkout
            dockerfile: Dockerfile_queue
        volumes:
            - microservice_checkout_sources:/usr/src/app:rw
        depends_on:
            - checkout-db
        links:
            - checkout-db:db
            - users:users_api
        env_file:
            - microservices/checkout/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    admin-frontend:
        container_name: admin_react
        build:
            context: ./frontend/react-admin
            dockerfile: Dockerfile-frontend
        volumes:
            - frontend_admin_sources:/usr/src/app:rw
        environment:
            - XDEBUG_CONFIG=remote_host=172.0.0.1 remote_enable=on
            - COMPOSER_AUTH=${COMPOSER_AUTH}
            - VIRTUAL_HOST=frontend-admin.micro.test
            - VIRTUAL_PORT=3000
        #ports:
        #    - "81:3000"
        depends_on:
            - backend
        links:
            - backend:admin_api
        env_file:
            - frontend/react-admin/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    influencer-frontend:
        container_name: influencer_react
        build:
            context: ./frontend/react-influencer
            dockerfile: Dockerfile-frontend
        volumes:
            - frontend_influencer_sources:/usr/src/app:rw
        environment:
            - XDEBUG_CONFIG=remote_host=172.0.0.1 remote_enable=on
            - COMPOSER_AUTH=${COMPOSER_AUTH}
            - VIRTUAL_HOST=frontend-influencer.micro.test
            - VIRTUAL_PORT=3000
        #ports:
        #    - "82:3000"
        depends_on:
            - backend
        links:
            - backend:admin_api
        env_file:
            - frontend/react-influencer/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"


    checkout-frontend:
        container_name: next_checkout
        build:
            context: ./frontend/next-checkout
            dockerfile: Dockerfile
        volumes:
            - frontend_checkout_sources:/usr/src/app:rw
        environment:
            - XDEBUG_CONFIG=remote_host=172.0.0.1 remote_enable=on
            - COMPOSER_AUTH=${COMPOSER_AUTH}
            - VIRTUAL_HOST=frontend-checkout.micro.test
            - VIRTUAL_PORT=3000
        #ports:
        #    - "83:3000"
        depends_on:
            - backend
        links:
            - backend:admin_api
        env_file:
            - frontend/next-checkout/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    backend:
        container_name: admin_api
        build:
            context: ./backend
            dockerfile: Dockerfile-backend
        volumes:
            - backend_sources:/var/www:rw
            - ./backend/docker/vhost.d:/etc/apache2/sites-enabled
        environment:
            - XDEBUG_CONFIG=remote_host=172.0.0.1 remote_enable=on
            - APP_XDEBUG=enabled
            - COMPOSER_AUTH=${COMPOSER_AUTH}
            - VIRTUAL_HOST=backend.micro.test
            - VIRTUAL_PORT=80
        depends_on:
            - db
            - redis
        links:
            - db:db
            - mail:mail
            - users:users_api
        env_file:
            - backend/.env
        logging:
            driver: "json-file"
            options:
                max-size: "1M"
                max-file: "5"

    db:
        container_name: admin_db
        image: mysql:8
        command: [mysqld, --default-authentication-plugin=mysql_native_password]
        volumes:
            - database:/var/lib/mysql:rw
        environment:
            MYSQL_ROOT_PASSWORD: "toor"
            MYSQL_USER: "microservices"
            MYSQL_PASSWORD: "monolith"
            MYSQL_DATABASE: "microservices"
        ports:
            - "3306:3306"

    users-db:
        container_name: users_db
        image: mysql:8
        command: [mysqld, --default-authentication-plugin=mysql_native_password]
        volumes:
            - users_database:/var/lib/mysql:rw
        environment:
            MYSQL_ROOT_PASSWORD: "toor"
            MYSQL_USER: "microservices"
            MYSQL_PASSWORD: "monolith"
            MYSQL_DATABASE: "users"
        ports:
            - "33066:3306"

    checkout-db:
        container_name: checkout_db
        image: mysql:8
        command: [mysqld, --default-authentication-plugin=mysql_native_password]
        volumes:
            - checkout_database:/var/lib/mysql:rw
        environment:
            MYSQL_ROOT_PASSWORD: "toor"
            MYSQL_USER: "microservices"
            MYSQL_PASSWORD: "monolith"
            MYSQL_DATABASE: "checkout"
        ports:
            - "33067:3306"

    redis:
        container_name: redis_cache
        image: redis:latest

    mail:
        container_name: mail_catcher
        image: djfarrelly/maildev
        command: bin/maildev --web 80 --smtp 25 --hide-extensions STARTTLS
        expose:
            - 8080
        environment:
            - VIRTUAL_HOST=mailer.micro.test
            - VIRTUAL_PORT=80

volumes:
    database: ~
    users_database: ~
    checkout_database: ~
    frontend_admin_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/frontend/react-admin
    frontend_influencer_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/frontend/react-influencer
    frontend_checkout_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/frontend/next-checkout
    backend_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/backend
    microservice_email_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/microservices/emails
    microservice_users_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/microservices/users
    microservice_checkout_sources:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: $PWD/microservices/checkout

networks:
    default:
        external:
            name: nginx-proxy
